services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
      - "9093:9093"
    healthcheck:
      test: |
        bash -c "
        kafka-topics --list --bootstrap-server localhost:9092 >/dev/null 2>&1 && \
        kafka-topics --create --topic healthcheck --partitions 1 --replication-factor 1 --bootstrap-server localhost:9092 --if-not-exists && \
        kafka-topics --delete --topic healthcheck --bootstrap-server localhost:9092
        "
      interval: 10s
      timeout: 20s
      retries: 10
      start_period: 30s

  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: order_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  order-service:
    build: .
    ports:
      - "8080:8080"
    environment:
      SERVER_PORT: 8080
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: order_service
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: orders
      KAFKA_GROUP_ID: order-service-group
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./templates:/app/templates
      - ./static:/app/static

  kafka-producer:
    build: .
    command: ["./producer", "-n", "3"]
    environment:
      KAFKA_BROKER: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  postgres_data: